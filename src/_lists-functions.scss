/* ---------- ---------- *
 * A couple of advanced Sass lists functions
 *
 * remove-at($haystack, $needle)
 * remove($haystack, $needle)
 * insert-at($haystack, $needle, $value)
 * prepend($haystack, $value)
 * replace-at($haystack, $needle, $value)
 * replace($haystack, $needle, $value)
 * slice($haystack, $start: 1, $end: length($haystack))
 * reverse($haystack, $recursive: false)
 *
 * CodePen: http://codepen.io/HugoGiraudel/pen/loAgq
/* ---------- ---------- */

/**
 * Remove value from $haystack at index $needle
 */
@function remove-at($haystack, $needle) {
  $new: ();
  @for $i from 1 through length($haystack) {
    @if $i != $needle {
      $new: append($new, nth($haystack, $i));
    }
  }
  @return $new;
}

/**
 * Remove value(s) $needle from $haystack [recursive]
 */
@function remove($haystack, $needle) {
  $new: ();
  @for $i from 1 through length($haystack) {
    @if type-of(nth($haystack, $i)) == list {
      $new: append($new, remove(nth($haystack, $i), $needle));
    }
    @else if nth($haystack, $i) != $needle {
      $new: append($new, nth($haystack, $i));
    }
  }
  @return $new;
}

/** 
 * Add $value at index $needle in $haystack
 */
@function insert-at($haystack, $needle, $value) {
  $new: ();
  @for $i from 1 through length($haystack) {
    @if $i == $needle {
      $new: append($new, $value);
    }
    $new: append($new, nth($haystack, $i));
  }
  @return $new;
}

/**
 * Add $value as first index of $haystack
 */
@function prepend($haystack, $value) {
  @return join($value, $haystack);
}

/**
 * Replace value at index $needle from $haystack bu $value
 */
@function replace-at($haystack, $needle, $value) {
  $new: ();
  @for $i from 1 through length($haystack) {
    @if $i == $needle {
      $new: append($new, $value);
    }
    @else {
      $new: append($new, nth($haystack, $i));
    }
  }
  @return $new;
}

/** 
 * Replace $needle by $value in $haystack [recursive]
 */
@function replace($haystack, $needle, $value) {
  $new: ();
  @for $i from 1 through length($haystack) {
    @if type-of(nth($haystack, $i)) == list {
      $new: append($new, replace(nth($haystack, $i), $needle, $value));
    }
    @else {
      @if nth($haystack, $i) == $needle {
        $new: append($new, $value);
      }
      @else {
        $new: append($new, nth($haystack, $i));
      }
    }
  }
  @return $new;
}

/**
 * Slices $haystack between $start and $end
 */ 
@function slice($haystack, $start: 1, $end: length($haystack)) {
  $new: ();
  $start: if($start <= 0, 1, if($start > length($haystack), length($haystack), $start));
  $end: if($end > length($haystack), length($haystack), if($end < $start, $start, $end));
  @for $i from $start through $end {
     $new: append($new, nth($haystack, $i));
  }
  @return $new;
}
    
/**
 * Reverses the order of $haystack
 */
@function reverse($haystack, $recursive: false) {
   $new: ();
   @for $i from length($haystack)*-1 through -1 {
      @if type-of(nth($haystack, abs($i))) == list and $recursive {
        $new: append($new, reverse(nth($haystack, abs($i))));      
      }
      @else {
        $new: append($new, nth($haystack, abs($i)));
      }
   }
   @return $new;
}