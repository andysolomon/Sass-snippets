/* --------------------------------------------------------------- *
 * A couple of advanced Sass list functions
 * --------------------------------------------------------------- *
 * first($list)
 * last($list)
 * to-string($list, $glue: '', $is-nested: false)
 * last-index($list, $value)
 * prepend($list, $value)
 * insert-nth($list, $index, $value)
 * replace($list, $old-value, $new-value, $recursive: false)
 * replace-nth($list, $index, $value)
 * remove($list, $value, $recursive: false)
 * remove-nth($list, $index)
 * slice($list, $start: 1, $end: length($list))
 * reverse($list, $recursive: false)
 * loop($list, $value: 1)
 * --------------------------------------------------------------- *
 * CodePen: http://codepen.io/HugoGiraudel/pen/loAgq
 * Repository: https://github.com/HugoGiraudel/Sass-snippets/blob/master/src/list-functions/
 * --------------------------------------------------------------- */


/**
 * Returns first element of $list
 * ---------------------------------------------------------------
 * @param $list : list
 * ---------------------------------------------------------------
 * @return [Sass::Script::Value::List]
 */
@function first($list) {
  @return nth($list, 1);
}

/**
 * Returns last element of $list
 * ---------------------------------------------------------------
 * @param $list : list
 * ---------------------------------------------------------------
 * @return [Sass::Script::Value::List]
 */
@function last($list) {
  @return nth($list, length($list));
}

/**
 * Joins all elements of $list with $glue
 * ---------------------------------------------------------------
 * @param $list      : list
 * @param $glue      : value to use as a join string
 * @param $is-nested : strictly internal boolean for recursivity
 * ---------------------------------------------------------------
 * @return [Sass::Script::Value::String]
 */
@function to-string($list, $glue: '', $is-nested: false) {
  $result: null;

  @for $i from 1 through length($list) {
    $e: nth($list, $i);

    @if type-of($e) == list {
      $result: $result#{to-string($e, $glue, true)};
    }
    
    @else {
      $result: if($i != length($list) or $is-nested, $result#{$e}#{$glue}, $result#{$e});
    }
  }

  @return $result;
}

/**
 * Returns last index of $value in $list
 * ---------------------------------------------------------------
 * @param $list  : list
 * @param $value : value to be searched for
 * ---------------------------------------------------------------
 * @return [Sass::Script::Value::Number]
 */
@function last-index($list, $value) {
  @for $i from length($list)*-1 through -1 {
    @if nth($list, abs($i)) == $value {
      @return abs($i);
    }
  }

  @return null;
}

/**
 * Add $value as first index of $list
 * ---------------------------------------------------------------
 * @param $list  : list
 * @param $value : value to prepend to the list
 * ---------------------------------------------------------------
 * @return [Sass::Script::Value::List]
 */
@function prepend($list, $value) {
  @return join($value, $list);
}

/** 
 * Add $value at $index in $list
 * ---------------------------------------------------------------
 * @param $list  : list
 * @param $index : index to add
 * @param $value : value to add
 * ---------------------------------------------------------------
 * @raise [ArgumentError] if $index isn't an integer between 1 and the length
 * ---------------------------------------------------------------
 * @return [Sass::Script::Value::List]
 */
@function insert-nth($list, $index, $value) {
  $result: null;
      
  @if type-of($index) != number {
    @warn "$index: #{quote($index)} is not a number for `insert-nth`.";
  }

  @else if $index < 1 {
    @warn "List index 0 must be a non-zero integer for `insert-nth`";
  }

  @else if $index > length($list) {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `insert-nth'.";
  }

  @else {
    $result: ();
        
    @for $i from 1 through length($list) {
      @if $i == $index {
        $result: append($result, $value);
      }

      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}

/**
 * Replace value at $index from $list by $value
 * ---------------------------------------------------------------
 * @param $list  : list
 * @param $index : index to update
 * @param $value : new value for index $index
 * ---------------------------------------------------------------
 * @raise [ArgumentError] if $index isn't an integer between -length and length but not 0
 * ---------------------------------------------------------------
 * @return [Sass::Script::Value::List]
 */
@function replace-nth($list, $index, $value) {
  $result: null;
      
  @if type-of($index) != number {
    @warn "$index: #{quote($index)} is not a number for `replace-nth`.";
  }

  @else if $index == 0 {
    @warn "List index 0 must be a non-zero integer for `replace-nth`.";
  }
      
  @else if abs($index) > length($list) {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `replace-nth`.";
  }

  @else {
    $result: ();
    $index: if($index < 0, length($list) + $index + 1, $index);  

    @for $i from 1 through length($list) {
      @if $i == $index {
        $result: append($result, $value);
      }
    
      @else {
        $result: append($result, nth($list, $i));
      }
    }
  }
 
  @return $result;
}

/** 
 * Replace $old-value by $new-value in $list
 * ---------------------------------------------------------------
 * @param $list  : list
 * @param $old-value : value to replace
 * @param $new-value : new value for $old-value
 * @param $recursive : enable / disable recursivity
 * ---------------------------------------------------------------
 * @return [Sass::Script::Value::List]
 */
@function replace($list, $old-value, $new-value, $recursive: false) {
  $result: ();

  @for $i from 1 through length($list) {
    @if type-of(nth($list, $i)) == list and $recursive {
      $result: append($result, replace(nth($list, $i), $old-value, $new-value, $recursive));
    }

    @else {
      @if nth($list, $i) == $old-value {
        $result: append($result, $new-value);
      }

      @else {
        $result: append($result, nth($list, $i));
      }
    }
  }

  @return $result;
}

/**
 * Remove value from $list at index $index
 * ---------------------------------------------------------------
 * @param $list  : list
 * @param $index : index to remove
 * ---------------------------------------------------------------
 * @raise [ArgumentError] if $index isn't an integer between -length and length but not 0
 * ---------------------------------------------------------------
 * @return [Sass::Script::Value::List]
 */
@function remove-nth($list, $index) {
  $result: null;
        
  @if type-of($index) != number {
    @warn "$index: #{quote($index)} is not a number for `remove-nth`.";
  }

  @else if $index == 0 {
    @warn "List index 0 must be a non-zero integer for `remove-nth`.";
  }

  @else if abs($index) > length($list) {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.";
  }

  @else {
    $result: ();
    $index: if($index < 0, length($list) + $index + 1, $index);  

    @for $i from 1 through length($list) {
      @if $i != $index {
        $result: append($result, nth($list, $i));
      }
    }
  }
        
  @return $result;
}

/**
 * Remove value(s) $value from $list
 * ---------------------------------------------------------------
 * @param $list      : list
 * @param $value     : value to remove
 * @param $recursive : enable / disable recursivity
 * ---------------------------------------------------------------
 * @return [Sass::Script::Value::List]
 */
@function remove($list, $value, $recursive: false) {
  $result: ();

  @for $i from 1 through length($list) {
    @if type-of(nth($list, $i)) == list and $recursive {
      $result: append($result, remove(nth($list, $i), $value, $recursive));
    }

    @else if nth($list, $i) != $value {
      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}

/**
 * Slices $list between $start and $end
 * ---------------------------------------------------------------
 * @param $list  : list
 * @param $start : start index
 * @param $end   : end index
 * ---------------------------------------------------------------
 * @raise [ArgumentError] if $start or $end aren't integers between 1 and length
 * @raise [ArgumentError] if $start is greater than $end
 * ---------------------------------------------------------------
 * @return [Sass::Script::Value::List]
 */ 
@function slice($list, $start: 1, $end: length($list)) {
  $result: null;
              
  @if type-of($start) != number or type-of($end) != number {
    @warn "Either $start or $end are not a number for `slice`.";
  }
             
  @else if $start > $end {
    @warn "The start index has to be lesser than or equals to the end index.";
  }

  @else if $start < 1 or $end < 1 {
    @warn "List indexes must be non-zero integers for `slice`.";
  }

  @else if $start > length($list) {
    @warn "List index is #{$start} but list is only #{length($list)} item long for `slice`.";
  }
             
  @else if $end > length($list) {
    @warn "List index is #{$end} but list is only #{length($list)} item long for `slice`.";
  }
  
  @else {
    $result: ();
                
    @for $i from $start through $end {
      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}
    
/**
 * Reverses the order of $list
 * ---------------------------------------------------------------
 * @param $list      : list
 * @param $recursive : enable / disable recursivity
 * ---------------------------------------------------------------
 * @return [Sass::Script::Value::List]
 */
@function reverse($list, $recursive: false) {
   $result: ();

   @for $i from length($list)*-1 through -1 {
      @if type-of(nth($list, abs($i))) == list and $recursive {
        $result: append($result, reverse(nth($list, abs($i)), $recursive));      
      }

      @else {
        $result: append($result, nth($list, abs($i)));
      }
   }

   @return $result;
}

/**
 * Shift indexes from $list of $value
 * ---------------------------------------------------------------
 * @param $list  : list
 * @param $value : number of position between old and new indexes
 * ---------------------------------------------------------------
 * @return [Sass::Script::Value::List]
 */
@function loop($list, $value: 1) {
  $result: ();
    
  @for $i from 0 to length($list) {
    $result: append($result, nth($list, ($i - $value) % length($list) + 1));
  }
  
  @return $result;
}


/**
 * Usage
 */
$list: a, b, c, d c, e, f, c;

$test-first: first($list);                     // a

$test-last: last($list);                       // c

$test-to-string: to-string($list);             // abcdcefc
$test-to-string: to-string($list, "-");        // a-b-c-d-c-e-f-c

$test-last-index: last-index($list, c);        // 7
$test-last-index: last-index($list, z);        // null

$test-prepend: prepend($list, z);              // z, a, b, c, d c, e, f, c
$test-prepend: prepend($list, y z);            // y z, a, b, c, d c, e, f, c

$test-insert-nth: insert-nth($list, -1, z);    // error
$test-insert-nth: insert-nth($list, 0, z);     // error
$test-insert-nth: insert-nth($list, 4, z);     // a, b, c, z, d c, e, f, c
$test-insert-nth: insert-nth($list, 100, z);   // error

$test-replace: replace($list, c, z);           // a, b, z, d c, e, f, z
$test-replace: replace($list, c, z, true);     // a, b, z, d z, e, f, z
$test-replace: replace($list, z, y);           // a, b, c, d c, e, f, c

$test-replace-nth: replace-nth($list, -10, z); // error
$test-replace-nth: replace-nth($list, -1, z);  // a, b, c, d c, e, f, z 
$test-replace-nth: replace-nth($list, 0, z);   // error
$test-replace-nth: replace-nth($list, 4, z);   // a, b, c, z, e, f, c
$test-replace-nth: replace-nth($list, 100, z); // error

$test-remove: remove($list, c);                // a, b, d c, e, f
$test-remove: remove($list, c, true);          // a, b, d, e, f
$test-remove: remove($list, z);                // a, b, c, d c, e, f, c

$test-remove-nth: remove-nth($list, -10);      // error
$test-remove-nth: remove-nth($list, -1);       // a, b, c, d c, e, f
$test-remove-nth: remove-nth($list, 0);        // error
$test-remove-nth: remove-nth($list, 1);        // b, c, d c, e, f, c
$test-remove-nth: remove-nth($list, 100);      // error 

$test-slice: slice($list);                     // a, b, c, d c, e, f, c
$test-slice: slice($list, 3, 6);               // c, d c, e, f
$test-slice: slice($list, 5, 4);               // error
$test-slice: slice($list, -100, 100);          // error

$test-reverse: reverse($list);                 // c, f, e, d c, c, b, a
$test-reverse: reverse($list, true);           // c, f, e, c d, c, b, a

$test-loop: loop($list);                       // c, a, b, c, d c, e, f
$test-loop: loop($list, 2);                    // f, c, a, b, c, d c, e
$test-loop: loop($list, -2);                   // c, d c, e, f, c, a, b